nknotdata220 <- data.frame(mydata, fitknot$cluster)
clusplot(nknotdata220, fitknot$cluster, color= T , shade=T, labels=2, lines=0)
mydata<- knotdataAug12[,(2:31)]
nknotdata230 <- data.frame(mydata, fitknot$cluster)
clusplot(nknotdata230, fitknot$cluster, color= T , shade=T, labels=2, lines=0)
mydata<- knotdataAug12[,(2:41)]
nknotdata240 <- data.frame(mydata, fitknot$cluster)
clusplot(nknotdata240, fitknot$cluster, color= T , shade=T, labels=2, lines=0)
RMSEresults <- read.csv("~/Dropbox/Ryerson/PhD courses/Thesis/proposal/RMSEresults.csv")
View(RMSEresults)
t.test(RMSEresults$X11,RMSEresults$X10)
t.test(RMSEresults$X9,RMSEresults$X10)
t.test(RMSEresults$X9,RMSEresults$X11107)
t.test(RMSEresults$X111012,RMSEresults$X11107)
moviedatacleansort <- read.csv("~/Dropbox/Ryerson/PhD courses/Thesis/LDOS-CoMoDa/moviedatacleansort.csv")
View(moviedatacleansort)
RMSEresults <- read.csv("~/Dropbox/Ryerson/PhD courses/Thesis/proposal/RMSEresults.csv")
View(RMSEresults)
t.test(RMSEresults$X111012,RMSEresults$X578)
t.test(RMSEresults$X111012,RMSEresults$X10)
Secondary.Disease.Names <- read.csv("~/Dropbox/Ryerson/PhD courses/St.Michael's/sunlife/FW__SunLife_Descriptive_Data_Information/Secondary Disease Names.csv")
View(Secondary.Disease.Names)
data<-Secondary.Disease.Names
summary(data)
fit <- kmeans(data, 5)
data<-na.omit(data)
fit <- kmeans(data, 5)
View(data)
hist(data$LTD)
plot(data$LTD)
freq(data$LTD)
counts <- table(data$LTD)
barplot(counts)
counts <- table(data$STD)
barplot(counts)
cor(data$LTD, STD = NULL, use = "everything",
method = c("pearson", "kendall", "spearman"))
cor(data$LTD, data$STD)
cov(data, use="complete.obs")
cov(data$LTD, data$STD , use="complete.obs")
getmarks<- function (marks) {if(marks<= 60){print("Grade = F")}elsif (marks<=70){print("grade = D")}}
getmarks<- function (marks) {if(marks<= 60){print("Grade = F")}elsif {(marks<=70){print("grade = D")}}
getmarks<- function (marks) {if(marks<= 60){print("Grade = F")}elsif (marks<=70){print("grade = D")}}
else if (marks<=70){print("grade = D")}}}
else if (marks<=70){print("grade = D")}}
else {if (marks<=70){print("grade = D")}}
getmarks<- function (marks) {
if(marks<= 60)
{print("Grade = F")}
else if (marks<=70){print("grade = D")}}
function(70)
function(70)
getmarks(70)
getmarks<- function (marks) {
if(marks<= 60)
{print("Grade = F")} else if (marks<=70)
{print("grade = D")}
else if (marks<=80)
{print("grade = C")}
else if (marks<=90)
{print("grade = B")}
else if (90<marks<=100)
{print("grade = A")}}
getmarks<- function (marks) {
if(marks<= 60)
{print("Grade = F")}
else if (marks<=70)
{print("grade = D")}
else if (marks<=80)
{print("grade = C")}
else if (marks<=90)
{print("grade = B")}
else if (90 < marks <= 100)
{print("grade = A")}}
getmarks<- function (marks) {
if(marks<= 60)
{print("Grade = F")}
else if (marks<=70)
{print("grade = D")}
else if (marks<=80)
{print("grade = C")}
else if (marks<=90)
{print("grade = B")}
else if (90 < marks)
{print("grade = A")}}
getmarks(88)
questions <- read.csv("~/Dropbox/Ryerson/PhD courses/IBM/data/15-DEC-2015/questions.csv")
View(questions)
unique(questions$ibmId)
questions <- read.csv("~/Dropbox/Ryerson/PhD courses/IBM/data/questions.csv")
View(questions)
unique(questions$ibmId)
users <- read.csv("~/Dropbox/Ryerson/PhD courses/IBM/data/users.csv")
View(users)
recommendations <- read.csv("~/Dropbox/Ryerson/PhD courses/IBM/data/recommendations.csv")
View(recommendations)
View(questions)
View(recommendations)
LDOS.CoMoDa <- read.csv("~/Dropbox/Ryerson/PhD courses/Thesis/LDOS-CoMoDa/LDOS-CoMoDa.csv")
View(LDOS.CoMoDa)
square.test(table(LDOS.CoMoDa$daytype,LDOS.CoMoDa$rating))
chisq.test(table(LDOS.CoMoDa$daytype,LDOS.CoMoDa$rating))
chisq.test(table(LDOS.CoMoDa$season,LDOS.CoMoDa$rating))
chisq.test(table(LDOS.CoMoDa$endEmo,LDOS.CoMoDa$rating))
chisq.test(table(LDOS.CoMoDa$dominantEmo,LDOS.CoMoDa$rating))
mydata<-read.csv("~/Users/parisabanoo81/Desktop/RS for WA-Feb2017/RSdata.csv")
mydata<-read.csv("/Users/parisabanoo81/Desktop/RS for WA-Feb2017/RSdata.csv")
if (!require("RCurl"))
install.packages("RCurl")
if (!require("MASS"))
install.packages("MASS")
if (!require("leaps"))
install.packages("leaps")
library(RCurl) # getURL
library(MASS) # stepwise regression
library(leaps) # all subsets regression
u <- getURL("http://vincentarelbundock.github.io/Rdatasets/csv/Ecdat/Computers.csv")
u <- getURL("http://vincentarelbundock.github.io/Rdatasets/csv/Ecdat/Computers.csv")
c_prices <- read.csv(text = u)
rn_train <- sample(nrow(c_prices), floor(nrow(c_prices)*0.7))
train <- c_prices[rn_train,]
test <- c_prices[-rn_train,]
model_mlr <- lm(price~ram+speed+screen+hd+ads, data=train)
prediction <- predict(model_mlr, interval="prediction", newdata =test)
errors <- prediction[,"fit"] - test$price
hist(errors)
rmse <- sqrt(sum((prediction[,"fit"] - test$price)^2)/nrow(test))
rel_change <- 1 - ((test$price - abs(errors)) / test$price)
pred25 <- table(rel_change<0.25)["TRUE"] / nrow(test)
paste("RMSE:", rmse)
paste("PRED(25):", pred25)
rn_train <- sample(nrow(c_prices), floor(nrow(c_prices)*0.7))
rn_train <- sample(nrow(c_prices), floor(nrow(c_prices)*0.7))
train <- c_prices[rn_train,c("price","ram")]
test <- c_prices[-rn_train,c("price","ram")]
model_ulm <- lm(price~ram, data=train)
prediction <- predict(model_ulm, interval="prediction", newdata =test)
errors <- prediction[,"fit"] - test$price
hist(errors)
rmse <- sqrt(sum((prediction[,"fit"] - test$price)^2)/nrow(test))
rel_change <- 1 - ((test$price - abs(errors)) / test$price)
pred25 <- table(rel_change<0.25)["TRUE"] / nrow(test)
paste("RMSE:", rmse)
paste("PRED(25):", pred25)
full <- lm(price~ram+hd+speed+screen+ads+trend,data=c_prices)
null <- lm(price~1,data=c_prices)
stepF <- stepAIC(null, scope=list(lower=null, upper=full), direction= "forward", trace=TRUE)
summary(stepF)
full <- lm(price~ram+hd+speed+screen+ads+trend,data=c_prices)
stepB <- stepAIC(full, direction= "backward", trace=TRUE)
stepB <- stepAIC(full, direction= "backward", trace=TRUE)
summary(stepB)
ar1_wh <- read_csv("~/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets/ar1-wh.csv")
describe(ar1_wh)
ar3_wh <- read_csv("~/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets/ar3-wh.csv")
describe(ar3_wh)
ar4_wh <- read_csv("~/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets/ar4-wh.csv")
describe(ar4_wh)
ar5_wh <- read_csv("~/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets/ar5-wh.csv")
describe(ar5_wh)
ar6_wh <- read_csv("~/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets/ar6-wh.csv")
describe(ar6_wh)
library (Hmisc)
ar1_wh <- read_csv("~/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets/ar1-wh.csv")
describe(ar1_wh)
ar3_wh <- read_csv("~/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets/ar3-wh.csv")
describe(ar3_wh)
ar4_wh <- read_csv("~/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets/ar4-wh.csv")
describe(ar4_wh)
ar5_wh <- read_csv("~/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets/ar5-wh.csv")
describe(ar5_wh)
ar6_wh <- read_csv("~/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets/ar6-wh.csv")
describe(ar6_wh)
Path <- "/Users/parisabanoo81/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets"
ar1_wh <- read_csv("Path/ar1-wh.csv")
ar1_wh <- read.csv("Path/ar1-wh.csv")
ar1_wh <- read.csv("Path"+"/ar1-wh.csv")
setwd(Path)
ar1_wh <- read.csv("ar1-wh.csv")
describe(ar1_wh)
setwd(Path_mac)
Path_mac <- "/Users/parisabanoo81/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets"
setwd(Path_mac)
ar1_wh <- read.csv("ar1-wh.csv")
describe(ar1_wh)
ar3_wh <- read_csv("ar3-wh.csv")
ar1_wh <- read.csv("ar1-wh.csv")
describe(ar1_wh)
ar3_wh <- read.csv("ar3-wh.csv")
describe(ar3_wh)
ar4_wh <- read.csv("ar4-wh.csv")
describe(ar4_wh)
ar5_wh <- read.csv("ar5-wh.csv")
describe(ar5_wh)
ar6_wh <- read.csv("ar6-wh.csv")
describe(ar6_wh)
jm1_wh <- read.csv("jm1-wh.csv")
describe(jm1_wh)
kc1_wh <- read.csv("kc1-wh.csv")
describe(kc1_wh)
kc2_wh <- read.csv("kc2-wh.csv")
describe(kc2_wh)
kc13_wh <- read.csv("kc3-wh.csv")
describe(kc3_wh)
kc3_wh <- read.csv("kc3-wh.csv")
describe(kc3_wh)
rm(kc13_wh)
mc2_wh <- read.csv("mc2-wh.csv")
describe(mc2_wh)
pc1_wh <- read.csv("pc1-wh.csv")
describe(pc1_wh)
pc3_wh <- read.csv("pc3-wh.csv")
describe(pc3_wh)
View(ar1_wh)
knitr::opts_chunk$set(echo = FALSE)
library (Hmisc)
Path_mac <- "/Users/parisabanoo81/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets"
setwd(Path_mac)
ar1_wh <- read.csv("ar1-wh.csv")
describe(ar1_wh$defects)
ar3_wh <- read.csv("ar3-wh.csv")
describe(ar3_wh$defects)
ar4_wh <- read.csv("ar4-wh.csv")
describe(ar4_wh$defects)
ar5_wh <- read.csv("ar5-wh.csv")
describe(ar5_wh$defects)
ar6_wh <- read.csv("ar6-wh.csv")
describe(ar6_wh$defects)
jm1_wh <- read.csv("jm1-wh.csv")
describe(jm1_wh$defects)
kc1_wh <- read.csv("kc1-wh.csv")
describe(kc1_wh$defects)
kc2_wh <- read.csv("kc2-wh.csv")
describe(kc2_wh$defects)
kc3_wh <- read.csv("kc3-wh.csv")
describe(kc3_wh$Defective)
mc2_wh <- read.csv("mc2-wh.csv")
describe(mc2_wh$Defective)
pc1_wh <- read.csv("pc1-wh.csv")
describe(pc1_wh$Defective)
pc3_wh <- read.csv("pc3-wh.csv")
describe(pc3_wh$Defective)
ncol(ar1_wh)
ncol(ar1_wh-1)
ncol(ar1_wh)-1
print("number of attributes is:", ncol(ar3_wh)-1)
print("number of attributes is:"+ ncol(ar3_wh)-1)
print("number of attributes is:" )ncol(ar3_wh)-1
print("number of attributes is:" )
ncol(ar3_wh)-1
library (Hmisc)
Path_mac <- "/Users/parisabanoo81/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets"
setwd(Path_mac)
ar1_wh <- read.csv("ar1-wh.csv")
describe(ar1_wh$defects)
ncol(ar1_wh)-1
ar3_wh <- read.csv("ar3-wh.csv")
describe(ar3_wh$defects)
print("number of attributes is:" )
ncol(ar3_wh)-1
ar4_wh <- read.csv("ar4-wh.csv")
describe(ar4_wh$defects)
ar5_wh <- read.csv("ar5-wh.csv")
describe(ar5_wh$defects)
ar6_wh <- read.csv("ar6-wh.csv")
describe(ar6_wh$defects)
jm1_wh <- read.csv("jm1-wh.csv")
describe(jm1_wh$defects)
kc1_wh <- read.csv("kc1-wh.csv")
describe(kc1_wh$defects)
kc2_wh <- read.csv("kc2-wh.csv")
describe(kc2_wh$defects)
kc3_wh <- read.csv("kc3-wh.csv")
describe(kc3_wh$Defective)
mc2_wh <- read.csv("mc2-wh.csv")
describe(mc2_wh$Defective)
pc1_wh <- read.csv("pc1-wh.csv")
describe(pc1_wh$Defective)
pc3_wh <- read.csv("pc3-wh.csv")
describe(pc3_wh$Defective)
cat("number of attributes is:", ncol(ar3_wh)-1 )
library (Hmisc)
Path_mac <- "/Users/parisabanoo81/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets"
setwd(Path_mac)
ar1_wh <- read.csv("ar1-wh.csv")
describe(ar1_wh$defects)
cat("number of attributes is:", ncol(ar1_wh)-1 )
ar3_wh <- read.csv("ar3-wh.csv")
describe(ar3_wh$defects)
cat("number of attributes is:", ncol(ar3_wh)-1 )
ncol(ar3_wh)-1
ar4_wh <- read.csv("ar4-wh.csv")
describe(ar4_wh$defects)
cat("number of attributes is:", ncol(ar4_wh)-1 )
ar5_wh <- read.csv("ar5-wh.csv")
describe(ar5_wh$defects)
cat("number of attributes is:", ncol(ar5_wh)-1 )
ar6_wh <- read.csv("ar6-wh.csv")
describe(ar6_wh$defects)
cat("number of attributes is:", ncol(ar6_wh)-1 )
jm1_wh <- read.csv("jm1-wh.csv")
describe(jm1_wh$defects)
cat("number of attributes is:", ncol(jm1_wh)-1 )
kc1_wh <- read.csv("kc1-wh.csv")
describe(kc1_wh$defects)
cat("number of attributes is:", ncol(kc1_wh)-1 )
kc2_wh <- read.csv("kc2-wh.csv")
describe(kc2_wh$defects)
cat("number of attributes is:", ncol(kc2_wh)-1 )
kc3_wh <- read.csv("kc3-wh.csv")
describe(kc3_wh$Defective)
cat("number of attributes is:", ncol(kc3_wh)-1 )
mc2_wh <- read.csv("mc2-wh.csv")
describe(mc2_wh$Defective)
cat("number of attributes is:", ncol(mc2_wh)-1 )
pc1_wh <- read.csv("pc1-wh.csv")
describe(pc1_wh$Defective)
cat("number of attributes is:", ncol(pc1_wh)-1 )
pc3_wh <- read.csv("pc3-wh.csv")
describe(pc3_wh$Defective)
cat("number of attributes is:", ncol(pc2_wh)-1 )
library (Hmisc)
Path_mac <- "/Users/parisabanoo81/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets"
setwd(Path_mac)
ar1_wh <- read.csv("ar1-wh.csv")
describe(ar1_wh$defects)
cat("number of attributes is:", ncol(ar1_wh)-1 )
ar3_wh <- read.csv("ar3-wh.csv")
describe(ar3_wh$defects)
cat("number of attributes is:", ncol(ar3_wh)-1 )
ar4_wh <- read.csv("ar4-wh.csv")
describe(ar4_wh$defects)
cat("number of attributes is:", ncol(ar4_wh)-1 )
ar5_wh <- read.csv("ar5-wh.csv")
describe(ar5_wh$defects)
cat("number of attributes is:", ncol(ar5_wh)-1 )
ar6_wh <- read.csv("ar6-wh.csv")
describe(ar6_wh$defects)
cat("number of attributes is:", ncol(ar6_wh)-1 )
jm1_wh <- read.csv("jm1-wh.csv")
describe(jm1_wh$defects)
cat("number of attributes is:", ncol(jm1_wh)-1 )
kc1_wh <- read.csv("kc1-wh.csv")
describe(kc1_wh$defects)
cat("number of attributes is:", ncol(kc1_wh)-1 )
kc2_wh <- read.csv("kc2-wh.csv")
describe(kc2_wh$defects)
cat("number of attributes is:", ncol(kc2_wh)-1 )
kc3_wh <- read.csv("kc3-wh.csv")
describe(kc3_wh$Defective)
cat("number of attributes is:", ncol(kc3_wh)-1 )
mc2_wh <- read.csv("mc2-wh.csv")
describe(mc2_wh$Defective)
cat("number of attributes is:", ncol(mc2_wh)-1 )
pc1_wh <- read.csv("pc1-wh.csv")
describe(pc1_wh$Defective)
cat("number of attributes is:", ncol(pc1_wh)-1 )
pc3_wh <- read.csv("pc3-wh.csv")
describe(pc3_wh$Defective)
cat("number of attributes is:", ncol(pc3_wh)-1 )
library (Hmisc)
Path_mac <- "/Users/parisabanoo81/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets"
setwd(Path_mac)
ar1_wh <- read.csv("ar1-wh.csv")
describe(ar1_wh$defects)
cat("number of attributes is:", ncol(ar1_wh)-1 )
ar3_wh <- read.csv("ar3-wh.csv")
cat(describe(ar3_wh$defects))
library (Hmisc)
Path_mac <- "/Users/parisabanoo81/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets"
Path_ubuntu<- "~/Dropbox/Ryerson/DSL/DSL presentations/replication/Datasets/"
setwd(Path_mac)
ar1_wh <- read.csv("ar1-wh.csv")
describe(ar1_wh)
cat("number of attributes is:", ncol(ar1_wh)-1 )
ar3_wh <- read.csv("ar3-wh.csv")
describe(ar3_wh$defects)
cat("number of attributes is:", ncol(ar3_wh)-1 )
ar4_wh <- read.csv("ar4-wh.csv")
describe(ar4_wh$defects)
cat("number of attributes is:", ncol(ar4_wh)-1 )
ar5_wh <- read.csv("ar5-wh.csv")
describe(ar5_wh$defects)
cat("number of attributes is:", ncol(ar5_wh)-1 )
ar6_wh <- read.csv("ar6-wh.csv")
describe(ar6_wh$defects)
cat("number of attributes is:", ncol(ar6_wh)-1 )
jm1_wh <- read.csv("jm1-wh.csv")
describe(jm1_wh$defects)
cat("number of attributes is:", ncol(jm1_wh)-1 )
kc1_wh <- read.csv("kc1-wh.csv")
describe(kc1_wh$defects)
cat("number of attributes is:", ncol(kc1_wh)-1 )
kc2_wh <- read.csv("kc2-wh.csv")
describe(kc2_wh$defects)
cat("number of attributes is:", ncol(kc2_wh)-1 )
kc3_wh <- read.csv("kc3-wh.csv")
describe(kc3_wh$Defective)
cat("number of attributes is:", ncol(kc3_wh)-1 )
mc2_wh <- read.csv("mc2-wh.csv")
describe(mc2_wh$Defective)
cat("number of attributes is:", ncol(mc2_wh)-1 )
pc1_wh <- read.csv("pc1-wh.csv")
describe(pc1_wh$Defective)
cat("number of attributes is:", ncol(pc1_wh)-1 )
pc3_wh <- read.csv("pc3-wh.csv")
describe(pc3_wh$Defective)
cat("number of attributes is:", ncol(pc3_wh)-1 )
library(e1071)
install.packages("e1071")
library(e1071)
model <- naiveBayes(Defective ~ ., data = pc3_wh)
class(model)
summary(model)
print(model)
Data<-pc3_wh
Data<-Data[sample(nrow(Data)),]
folds <- cut(seq(1,nrow(Data)),breaks=10,labels=FALSE)
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- Data[testIndexes, ]
trainData <- Data[-testIndexes, ]
#Training Naive Bayes Classifier
model <- naiveBayes(Defective ~ ., data = trainData)
preds <- predict(model, newdata = testData)
conf_matrix <- table(preds, testData$Defective)
}
conf_matrix
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- Data[testIndexes, ]
trainData <- Data[-testIndexes, ]
#Training Naive Bayes Classifier
model <- naiveBayes(Defective ~ ., data = trainData)
preds <- predict(model, newdata = testData)
conf_matrix[i] <- table(preds, testData$Defective)
}
conf_matrix
conf_matrix[1]
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- Data[testIndexes, ]
trainData <- Data[-testIndexes, ]
#Training Naive Bayes Classifier
model <- naiveBayes(Defective ~ ., data = trainData)
preds <- predict(model, newdata = testData)
conf_matrix <- table(preds, testData$Defective)
}
conf_matrix
conf_matrix[1]
conf_matrix[2]
conf_matrix[3]
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- Data[testIndexes, ]
trainData <- Data[-testIndexes, ]
#Training Naive Bayes Classifier
model <- naiveBayes(Defective ~ ., data = trainData)
preds <- predict(model, newdata = testData)
conf_matrix <- table(preds, testData$Defective)
TP[i] = conf_matrix[1]
FP[i] = conf_matrix[2]
FN[i]= conf_matrix[3]
TN[i] =conf_matrix[4]
}
preds
TP<-0
FP<-0
FN<-0
TN<-0
for(i in 1:10){
#Segement your data by fold using the which() function
testIndexes <- which(folds==i,arr.ind=TRUE)
testData <- Data[testIndexes, ]
trainData <- Data[-testIndexes, ]
#Training Naive Bayes Classifier
model <- naiveBayes(Defective ~ ., data = trainData)
preds <- predict(model, newdata = testData)
conf_matrix <- table(preds, testData$Defective)
TP[i] = conf_matrix[1]
FP[i] = conf_matrix[2]
FN[i]= conf_matrix[3]
TN[i] =conf_matrix[4]
}
library(caret)
fit <- train(
trainData, testData, method = "nb",
trControl = trainControl(method = "cv", number = 10))
fit <- train(
trainData, testData, method = "nb",
trControl = trainControl(method = "cv", number = 10))
fit <- train(
trainData, method = "nb",
trControl = trainControl(method = "cv", number = 10))
fit <- train(
trainData,trainData$Defective, method = "nb",
trControl = trainControl(method = "cv", number = 10))
fit
library("klar")
library("Klar")
library("caret")
library("caret")
fit <- train( trainData,trainData$Defective, method = "nb", trControl = trainControl(method = "cv", number = 10))
model <- train( trainData,trainData$Defective, method = "nb", trControl = trainControl(method = "cv", number = 10))
model
predict(model$finalModel,testData)
table(predict(model$finalModel,trainData)$class,testData)
table(predict(model$finalModel,trainData)$Defective,testData)
